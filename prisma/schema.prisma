generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DELIVERY_PERSON
}

model User {
  id       String @id @default(uuid())
  name     String
  cpf      String @unique
  password String

  role          UserRole       @default(DELIVERY_PERSON)
  addressId     String?        @map("address_id")
  address       Address?       @relation(fields: [addressId], references: [id])
  notifications Notification[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("users")
}

enum OrderStatus {
  WAITING
  PICKED_UP
  DELIVERED
  RETURNED
}

model Order {
  id               String      @unique @default(uuid())
  title            String
  content          String
  status           OrderStatus @default(WAITING)
  imgUrl           String?
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime?   @updatedAt @map("updated_at")
  receiverPersonId String      @map("receiver_person_id")
  deliveryPersonId String?     @map("delivery_person_id")

  deliveryAddressId String @map("delivery_address_id")
  currentAddressId  String @map("current_address_id")

  deliveryAddress Address @relation("delivery_order_address", fields: [deliveryAddressId], references: [id])
  currentAddress  Address @relation("current_order_address", fields: [currentAddressId], references: [id])

  @@map("orders")
}

model Address {
  id         String   @unique @default(uuid())
  city       String
  district   String
  cep        String
  number     String
  state      String
  complement String?
  street     String
  longitude  Float
  latitude   Float
  createdAt  DateTime @default(now()) @map("created_at")

  orderId          String? @map("order_id")
  deliveryPersonId String? @map("delivery_person_id")

  users         User[]
  DeliveryOrder Order[] @relation("delivery_order_address")
  CurrentOrder  Order[] @relation("current_order_address")

  @@map("addresses")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}
